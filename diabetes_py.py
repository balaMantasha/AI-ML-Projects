# -*- coding: utf-8 -*-
"""diabetes.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LEXLjbAMuzpRFAMIoXQUCKU0r8ympAjL
"""

import pandas as pd
import matplotlib.pyplot as plt
# Read the CSV file into a DataFrame
df = pd.read_csv('diabetes.csv')

# Display the DataFrame
print(df)



! pip install ydata_profiling
import matplotlib.pyplot as plt
import pandas as pd
from ydata_profiling import ProfileReport
df = pd.read_csv('diabetes.csv')
profile = ProfileReport(df)
profile.to_file('EDA.html')
from google.colab import files
files.download('EDA.html')

# Calculate the correlation matrix
correlation_matrix = df.corr()

# Display the correlation matrix
print(correlation_matrix)

import seaborn as sns
# Create a heatmap using Seaborn
# plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix')
plt.show()

#cleaning the data
# checking zero/null vlaues in columns
print((df['Glucose'] == 0).sum())
print((df['BloodPressure'] == 0).sum())
print((df['SkinThickness'] == 0).sum())
print((df['Insulin'] == 0).sum())
print((df['BMI'] == 0).sum())
print((df['DiabetesPedigreeFunction'] == 0).sum())
print((df['Age'] == 0).sum())

average_excluding_zeros = df[df['Glucose'] != 0]['values'].mean()

import pandas as pd
import matplotlib.pyplot as plt
# Read the CSV file into a DataFrame
df = pd.read_csv('diabetes.csv')

# Display the DataFrame
print(df)

# missimg values handling
zero_counts = (df == 0).sum()
print(zero_counts)

import pandas as pd
import matplotlib.pyplot as plt
# Read the CSV file into a DataFrame
df_1 = pd.read_csv('diabetes.csv')

# Replace zero values with NaN in the specified column
df_1['Insulin'] = df_1['Insulin'].replace(0, pd.NA)
df_1['SkinThickness'] = df_1['SkinThickness'].replace(0, pd.NA)
df_1['Glucose'] = df_1['Glucose'].replace(0, pd.NA)
df_1['BloodPressure'] = df_1['BloodPressure'].replace(0, pd.NA)
df_1['BMI'] = df_1['BMI'].replace(0, pd.NA)
print(df_1)

# BMI, Insulin and Skin thickness are replaced by simple mean
columns_to_replace = ['Insulin', 'SkinThickness', 'BMI']

# Calculate the mean values for the specified columns
mean_values = df_1[columns_to_replace].mean()
print(mean_values)

# Replace NaN values with the mean values in the specified columns
df_1[columns_to_replace] = df_1[columns_to_replace].fillna(mean_values)

# Print the DataFrame with NaN values replaced by mean values for the specified columns
print(df_1)

# calculating mean of glucose and blood pressure(conditional statements)
diabetes_df = df_1[df_1['Outcome'] == 1]

# Calculate the mean glucose level for women with diabetes
average_glucose_diabetes_women = diabetes_df['Glucose'].mean()

# Print the average glucose level for women with diabetes
print("Average glucose level for women with diabetes:", average_glucose_diabetes_women)

n_diabetes_df = df_1[df_1['Outcome'] == 0]

# Calculate the mean glucose level for women with diabetes
average_glucose_ndiabetes_women = n_diabetes_df['Glucose'].mean()

# Print the average glucose level for women with diabetes
print("Average glucose level for women with diabetes:", average_glucose_ndiabetes_women)

# assigning mean values(conditional)
df_1.loc[df_1['Outcome'] == 1, 'Glucose'] = df_1.loc[df_1['Outcome'] == 1, 'Glucose'].fillna(average_glucose_diabetes_women)
df_1.loc[df_1['Outcome'] == 0, 'Glucose'] = df_1.loc[df_1['Outcome'] == 0, 'Glucose'].fillna(average_glucose_ndiabetes_women)

print(df_1)

# calculation for mean blood pressure based on age
age_above_45_df = df_1[df_1['Age'] > 45]

# Calculate the mean blood pressure for individuals with age greater than 45
mean_blood_pressure_above_45 = age_above_45_df['BloodPressure'].mean()

# Print the mean blood pressure for age greater than 45
print("Mean blood pressure for age greater than 45:", mean_blood_pressure_above_45)

age_below_45_df = df_1[df_1['Age'] < 45]

# Calculate the mean blood pressure for individuals with age greater than 45
mean_blood_pressure_below_45 = age_below_45_df['BloodPressure'].mean()

# Print the mean blood pressure for age greater than 45
print("Mean blood pressure for age less than 45:", mean_blood_pressure_below_45)

# filling NaN values in blood pressure(conditional)

df_1.loc[df_1['Age'] > 45, 'BloodPressure'] = df_1.loc[df_1['Age'] > 45, 'BloodPressure'].fillna(mean_blood_pressure_above_45)
df_1.loc[df_1['Age'] < 45, 'BloodPressure'] = df_1.loc[df_1['Age'] <45,'BloodPressure'].fillna(mean_blood_pressure_below_45)

# # print(df_1)
# print(df_1.iloc[453])

# percentage of women with outcome one and only one pregnancy
one_pregnancy_diabetes_df = df_1[(df_1['Pregnancies'] == 1) & (df_1['Outcome'] == 1)]

# Count the number of rows in the filtered dataset
count_one_pregnancy_diabetes = len(one_pregnancy_diabetes_df)
print(count_one_pregnancy_diabetes)
total_count = len(df_1[df_1['Outcome'] == 1])
print(total_count)

# Calculate the percentage of women who had only one pregnancy and ended up having diabetes
percentage_one_pregnancy_diabetes = (count_one_pregnancy_diabetes / total_count) * 100
print(percentage_one_pregnancy_diabetes)



labels = ['Only One Pregnancy with Diabetes', 'total population with one pregnancy']

# Create sizes for the pie chart
sizes = [percentage_one_pregnancy_diabetes, 100 - percentage_one_pregnancy_diabetes]

# Create the pie chart
plt.figure(figsize=(8, 6))
plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140)

# Equal aspect ratio ensures that pie is drawn as a circle
plt.axis('equal')

# Add a title
plt.title('Percentage of Women with Only One Pregnancy and Diabetes')

# Show the pie chart
plt.show()

# percentage of women with outcome one and  two pregnancy
five_pregnancy_diabetes_df = df_1[(df_1['Pregnancies'] >5) & (df_1['Outcome'] == 1)]

# Count the number of rows in the filtered dataset
count_five_pregnancy_diabetes = len(five_pregnancy_diabetes_df)
print(count_five_pregnancy_diabetes)
total_count_5 = len(df_1[df_1['Outcome'] == 1])
print(total_count_5)
# Calculate the percentage of women who had only one pregnancy and ended up having diabetes
percentage_five_pregnancy_diabetes = (count_two_pregnancy_diabetes / total_count_5) * 100
print(percentage_five_pregnancy_diabetes)


labels = ['more than five Pregnancy with Diabetes', 'total population with more than five pregnancies']

# Create sizes for the pie chart
sizes = [percentage_five_pregnancy_diabetes, 100 - percentage_five_pregnancy_diabetes]

# Create the pie chart
plt.figure(figsize=(8, 6))
plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140)

# Equal aspect ratio ensures that pie is drawn as a circle
plt.axis('equal')

# Add a title
plt.title('Percentage of Women with more than five Pregnancies and Diabetes')

# Show the pie chart
plt.show()

# Filter the DataFrame for women with pregnancies less than or equal to 3
women_pregnancies_3_or_less_df = df_1[(df_1['Pregnancies'] <= 3) ]

# Calculate the average BMI for women with pregnancies less than or equal to 3
average_bmi_women_pregnancies_3_or_less = women_pregnancies_3_or_less_df['BMI'].mean()

# Print the average BMI
print("Average BMI for women with pregnancies less than or equal to 3:", average_bmi_women_pregnancies_3_or_less)


# Filter the DataFrame for women with pregnancies more or equal to 5
women_pregnancies_5_or_more_df = df_1[(df_1['Pregnancies'] >= 5) ]

# Calculate the average BMI for women with pregnancies less than or equal to 3
average_bmi_women_pregnancies_5_or_more = women_pregnancies_5_or_more_df['BMI'].mean()

# Print the average BMI
print("Average BMI for women with pregnancies 5 or more:", average_bmi_women_pregnancies_5_or_more)

import matplotlib.pyplot as plt

# Create a scatter plot of age vs BMI
plt.figure(figsize=(8, 6))
plt.scatter(df_1['Age'], df_1['BMI'], alpha=0.5)
plt.title('Relationship between Age and BMI')
plt.xlabel('Age')
plt.ylabel('BMI')
plt.grid(True)
plt.show()

# Create box plot of BMI by outcome
plt.figure(figsize=(8, 6))
df_1.boxplot(column='BMI', by='Outcome')
plt.title('BMI Distribution by Outcome')
plt.xlabel('Outcome')
plt.ylabel('BMI')
plt.xticks([1, 2], ['No Diabetes', 'Diabetes'])
plt.show()

outcome_0 = df_1[df_1['Outcome'] == 0]

# Calculate the average BMI for Outcome 0
avg_bmi_outcome_0 = outcome_0['BMI'].mean()

# Filter the DataFrame for Outcome 1 (diabetes)
outcome_1 = df_1[df_1['Outcome'] == 1]

# Calculate the average BMI for Outcome 1
avg_bmi_outcome_1 = outcome_1['BMI'].mean()

print("Average BMI of women with Outcome 0 (no diabetes):", avg_bmi_outcome_0)
print("Average BMI of women with Outcome 1 (diabetes):", avg_bmi_outcome_1)

diabetes_df = df_1[df_1['Outcome'] == 1]

# Count the number of individuals with diabetes and BMI greater than 30
diabetes_bmi_greater_30 = diabetes_df[diabetes_df['BMI'] > 30].shape[0]

# Count the number of individuals with diabetes and BMI less than 30
diabetes_bmi_less_30 = diabetes_df[diabetes_df['BMI'] < 30].shape[0]

print("Number of individuals with diabetes and BMI greater than 30:", diabetes_bmi_greater_30)
print("Number of individuals with diabetes and BMI less than 30:", diabetes_bmi_less_30)

no_diabetes_df = df_1[df_1['Outcome'] == 0]

# Count the number of individuals without diabetes and BMI greater than 30
no_diabetes_bmi_greater_30 = no_diabetes_df[no_diabetes_df['BMI'] > 30].shape[0]

# Count the number of individuals without diabetes and BMI less than 30
no_diabetes_bmi_less_30 = no_diabetes_df[no_diabetes_df['BMI'] < 30].shape[0]

print("Number of individuals without diabetes and BMI greater than 30:", no_diabetes_bmi_greater_30)
print("Number of individuals without diabetes and BMI less than 30:", no_diabetes_bmi_less_30)

# Filter the DataFrame for individuals with diabetes and glucose levels greater than 120
diabetes_glucose_greater_120 = diabetes_df[diabetes_df['Glucose'] > 120]

# Filter the DataFrame for individuals with diabetes and glucose levels less than 120
diabetes_glucose_less_120 = diabetes_df[diabetes_df['Glucose'] < 120]

print("Number of individuals with diabetes and glucose levels greater than 120:", len(diabetes_glucose_greater_120))
print("Number of individuals with diabetes and glucose levels less than 120:", len(diabetes_glucose_less_120))


o_diabetes_df = df_1[df_1['Outcome'] == 0]

# Filter the DataFrame for individuals without diabetes and glucose levels greater than 120
no_diabetes_glucose_greater_120 = no_diabetes_df[no_diabetes_df['Glucose'] > 120]

# Filter the DataFrame for individuals without diabetes and glucose levels less than 120
no_diabetes_glucose_less_120 = no_diabetes_df[no_diabetes_df['Glucose'] < 120]

print("Number of individuals without diabetes and glucose levels greater than 120:", len(no_diabetes_glucose_greater_120))
print("Number of individuals without diabetes and glucose levels less than 120:", len(no_diabetes_glucose_less_120))

# Calculate the average glucose concentration for diabetic and non-diabetic individuals
avg_glucose_diabetic = df_1[df_1['Outcome'] == 1]['Glucose'].mean()
avg_glucose_non_diabetic = df_1[df_1['Outcome'] == 0]['Glucose'].mean()

# Plot the average glucose concentration
plt.figure(figsize=(8, 6))
plt.bar(['Diabetic', 'Non-Diabetic'], [avg_glucose_diabetic, avg_glucose_non_diabetic], color=['green', 'blue'])
plt.title('Average Glucose Concentration for Diabetic and Non-Diabetic Individuals')
plt.xlabel('Outcome')
plt.ylabel('Average Glucose Concentration')
plt.show()

diabetes_0_pregnancies = df_1[(df_1['Outcome'] == 1) & (df_1['Pregnancies'] == 0)]

# Calculate the number of individuals with diabetes and 0 pregnancies
num_diabetes_0_pregnancies = len(diabetes_0_pregnancies)

print("Number of individuals with diabetes and 0 pregnancies:", num_diabetes_0_pregnancies)

# Group data by age and calculate the proportion of individuals with diabetes for each age group
age_diabetes_proportion = df_1.groupby('Age')['Outcome'].mean()

# Plot the proportion of individuals with diabetes against age
plt.figure(figsize=(10, 6))
plt.plot(age_diabetes_proportion.index, age_diabetes_proportion.values, marker='o', linestyle='-')
plt.title('Proportion of Diabetes by Age')
plt.xlabel('Age')
plt.ylabel('Proportion of Diabetes')
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 6))
plt.scatter(df_1['Age'], df_1['Glucose'], color='blue', alpha=0.5)
plt.title('Scatter Plot of Age vs. Glucose Concentration')
plt.xlabel('Age')
plt.ylabel('Glucose Concentration')
plt.grid(True)
plt.show()

import seaborn as sns
correlation = df_1['Age'].corr(df_1['Outcome'])

# Perform hypothesis testing
# Here we can use a t-test to test if the correlation coefficient is significantly different from zero
# Alternatively, you can use a non-parametric test like Spearman correlation
# For simplicity, let's just print the correlation coefficient and its statistical significance

# Print correlation coefficient and its significance
print("Correlation coefficient between age and diabetes risk:", correlation)

# Visualize the relationship between age and diabetes risk
plt.figure(figsize=(10, 6))
sns.boxplot(x='Outcome', y='Age', data=df_1)
plt.title('Boxplot of Age by Diabetes Status')
plt.xlabel('Diabetes Status')
plt.ylabel('Age')
plt.show()

mean_bp_pregnancies_2 = df_1[df_1['Pregnancies'] <= 2]['BloodPressure'].mean()

# Calculate the mean blood pressure for individuals with pregnancies greater than 6
mean_bp_pregnancies_6 = df_1[df_1['Pregnancies'] > 7]['BloodPressure'].mean()

print("Mean blood pressure for individuals with pregnancies less than or equal to 2:", mean_bp_pregnancies_2)
print("Mean blood pressure for individuals with pregnancies greater than 7:", mean_bp_pregnancies_6)

diabetes_df = df_1[df_1['Outcome'] == 1]
no_diabetes_df = df_1[df_1['Outcome'] == 0]

# Set up the figure and axes for subplots
fig, axs = plt.subplots(2, figsize=(10, 8))

# Create histograms for blood pressure values for individuals with and without diabetes
sns.histplot(diabetes_df['BloodPressure'], ax=axs[0], color='blue', kde=True)
sns.histplot(no_diabetes_df['BloodPressure'], ax=axs[1], color='green', kde=True)

# Set titles and labels
axs[0].set_title('Distribution of Blood Pressure for Individuals with Diabetes')
axs[0].set_xlabel('Blood Pressure')
axs[0].set_ylabel('Frequency')

axs[1].set_title('Distribution of Blood Pressure for Individuals without Diabetes')

age = df_1['Age']
blood_pressure = df_1['BloodPressure']

# Scatter plot
plt.figure(figsize=(10, 6))
plt.scatter(age, blood_pressure, color='blue', alpha=0.5)
plt.title('Scatter Plot of Age vs. Blood Pressure')
plt.xlabel('Age')
plt.ylabel('Blood Pressure')
plt.grid(True)
plt.show()

# Joint plot
plt.figure(figsize=(10, 6))
sns.jointplot(x=age, y=blood_pressure, kind='scatter', color='blue', alpha=0.5)
plt.xlabel('Age')
plt.ylabel('Blood Pressure')
plt.show()

# Regression plot
plt.figure(figsize=(10, 6))
sns.regplot(x=age, y=blood_pressure, scatter_kws={'alpha':0.5, 'color':'blue'}, line_kws={'color':'red'})
plt.title('Regression Plot of Age vs. Blood Pressure')
plt.xlabel('Age')
plt.ylabel('Blood Pressure')
plt.show()